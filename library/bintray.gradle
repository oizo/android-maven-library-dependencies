ext {

    PROJ_DRYRUN=false

    PROJ_REPO='maven'
    PROJ_GROUP='io.hvam.android'
    PROJ_ARTIFACTID='mavendependencies'
    PROJ_VERSION='0.1'
    PROJ_NAME='mavendependencies'
    PROJ_ORG='oizo'
    PROJ_WEBSITEURL='https://hvam.io'
    PROJ_ISSUETRACKERURL='https://github.com/oizo/android-maven-library-dependencies/issues'
    PROJ_VCSURL='https://github.com/oizo/android-maven-library-dependencies.git'
    PROJ_DESCRIPTION='Project to test dependencies in Maven artifacts'
    PROJ_LABELS=['hvam.io', 'test', 'dependencies']

    DEVELOPER_ID='oizo'
    DEVELOPER_NAME='oizo'
    DEVELOPER_EMAIL='dkhvam@gmail.com'

    LICENSE_ALL=["GPL-3.0"]
    LICENSE_NAME='GNU General Public License, Version 3'
    LICENSE_URL='https://www.gnu.org/licenses/gpl-3.0.en.html'
}

group = PROJ_GROUP
version = PROJ_VERSION
project.archivesBaseName = PROJ_ARTIFACTID

apply plugin: 'com.jfrog.bintray'
apply plugin: "com.jfrog.artifactory"
apply plugin: 'maven-publish'

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    failOnError true // Only disable for debugging
    source = android.sourceSets.main.java.srcDirs
    classpath += configurations.compile
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

afterEvaluate {
    javadoc.classpath += files(android.libraryVariants.collect { variant ->
        variant.javaCompile.classpath.files
    })
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

javadoc {
    options{
        encoding "UTF-8"
        charSet 'UTF-8'
        author true
        version true
        links "http://docs.oracle.com/javase/8/docs/api"
        title PROJ_ARTIFACTID
    }
}

def pomConfig = {
    licenses {
        license {
            name LICENSE_NAME
            url LICENSE_URL
            distribution "repo"
        }
    }
    developers {
        developer {
            id DEVELOPER_ID
            name DEVELOPER_NAME
            email DEVELOPER_EMAIL
        }
    }
}

publishing {
    publications {
        MavenJava(MavenPublication) {
            artifactId PROJ_ARTIFACTID
            artifact javadocJar
            artifact sourcesJar

            pom{
                packaging 'aar'
            }
            pom.withXml {
                def root = asNode()
                root.appendNode('description', PROJ_DESCRIPTION)
                root.children().last() + pomConfig
                def dependenciesNode = root.appendNode('dependencies')
                configurations.implementation.allDependencies.each {
                    if (it.name != 'unspecified') {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }
}

afterEvaluate {
    publishing.publications.MavenJava.artifact(bundleRelease)
}

bintray {

    user = getProperty("BINTRAY_USER")
    key = getProperty("BINTRAY_KEY")

    configurations = ['archives']

    dryRun = PROJ_DRYRUN
    publications = ['MavenJava']
    publish = true

    pkg {
        repo = PROJ_REPO
        name = PROJ_NAME
        userOrg = PROJ_ORG
        desc = PROJ_DESCRIPTION
        websiteUrl = PROJ_WEBSITEURL
        issueTrackerUrl = PROJ_ISSUETRACKERURL
        vcsUrl = PROJ_VCSURL
        licenses = LICENSE_ALL
        publicDownloadNumbers = true
    }
}

artifactory {
    contextUrl = 'http://oss.jfrog.org/artifactory'
    resolve {
        repository {
            repoKey = 'libs-release'
        }
    }
    publish {
        repository {
            repoKey = 'oss-snapshot-local' //The Artifactory repository key to publish to
            username = bintray.user
            password = bintray.key
            maven = true
        }
        defaults {
            publications('MavenJava')
            publishArtifacts = true
        }
    }
}